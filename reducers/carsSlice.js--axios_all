import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { HYDRATE } from "next-redux-wrapper";
import axios from 'axios';

const api_base = process.env.REACT_APP_API_BASE;

export const changePage = createAsyncThunk('cars/getNextPage', async (cars) => {
  const { selected_filter, page } = cars;
  // console.log({page});
  // console.log({selected_filter});
  
  
  console.log("=========================");
  console.log(cars);

  const init_url = `https://autodigg.com/ad-api/cars/list?usedCar=true&car_type=&page=1&radius=100&year=2011,2021&zip=&price_from=0&price_to=100000`;
  
  if(selected_filter && page) {
    init_url = `https://autodigg.com/ad-api/cars/list?usedCar=true&car_type=${selected_filter.car_type}&page=${page}&radius=${selected_filter.radius}&year=${selected_filter.year}&zip=${selected_filter.zip}&price_from=${selected_filter.price_from}&price_to=${selected_filter.price_to}&body_type=${selected_filter.body_type.join(",")}&exterior_color=${selected_filter.exterior_color.join(",")}&interior_color=${selected_filter.interior_color.join(",")}&features=${Object.keys(selected_filter.features).map(filter => selected_filter.features[filter].join(",")).filter(f => f = f).join(",")}`;
    init_url += Array.isArray(selected_filter.make) && selected_filter.make.length > 0 ? `&make=${selected_filter.make.map(mk => mk.name).join(",")}` : "&make=";
    init_url += Array.isArray(selected_filter.model) && selected_filter.model.length > 0 ? `&model=${selected_filter.model.join(",")}` : "&model=";
    console.log(Object.keys(selected_filter.features).map(filter => selected_filter.features[filter].join(",")).join(","), " : features");
  }

  console.log(init_url);
  console.log(init_url, " : new url");
  
  // const res = await axios.all([
  //   axios.get(init_url),
  //   axios.get(`${init_url}&return=count`),
  //   axios.get(`${init_url}&return=body_type`),
  //   axios.get(`${init_url}&return=exterior_color`),
  //   axios.get(`${init_url}&return=interior_color`),
  //   axios.get(`${init_url}&return=transmission`),
  //   axios.get(`${init_url}&return=drivetrain`),
  //   axios.get(`${init_url}&return=fuel_type`),
  //   axios.get(`${init_url}&return=model`),
  //   axios.get(`${init_url}&return=features`)
  // ]);

  const url_list = [
    axios.get(init_url),
    axios.get(`${init_url}&return=count`),
    axios.get(`${init_url}&return=body_type`),
    axios.get(`${init_url}&return=exterior_color`),
    axios.get(`${init_url}&return=interior_color`),
    axios.get(`${init_url}&return=transmission`),
    axios.get(`${init_url}&return=drivetrain`),
    axios.get(`${init_url}&return=fuel_type`),
    axios.get(`${init_url}&return=model`),
    axios.get(`${init_url}&return=features`)
  ];
  // cars.exclude.includes("feature") && url_list.splice(8, 1);
  // if(!selected_filter.features) {
  //   url_list.push(axios.get(`${init_url}&return=features`));
  // }
  // cars.exclude.includes("feature") && url_list.splice(8, 1);
  if(!selected_filter.model) {
    url_list.push(axios.get(`${init_url}&return=model`));
  }


  // console.log(url_list, "url list");

  // const res = await axios.all(url_list);

  // test -------------
  const t_url_list = axios.get(init_url);
  
  // test -------------

  const res = await axios.all(t_url_list);

  // console.log(res, "res");
  console.log(res, " : res");
  
  // return {
  //   exclude : cars.exclude,
  //   data: res[0].data ? res[0].data : cars.data, 
  //   count: res[1].data.count ? res[1].data.count : cars.count, 
  //   filter : {
  //     body_type : res[2].data ? res[2].data : cars.filter.body_type,
  //     exterior_color : res[3].data ? res[3].data : cars.filter.exterior_color,
  //     interior_color : res[4].data ? res[4].data : cars.filter.interior_color,
  //     transmission : res[5].data ? res[5].data : cars.filter.transmission,
  //     drivetrain : res[6].data ? res[6].data : cars.filter.drivetrain,
  //     fuel_type : res[7].data ? res[7].data : cars.filter.fuel_type,
  //     model : res[8].data ? res[8].data : cars.filter.model,
  //     features : res[9].data ? res[9].data : cars.filter.features
  //   }
  // };
});

const carsSlice = createSlice({
  name: "cars",
  initialState : {
    data : [],
    count: 0,
    page: 1,
    filter: [],
    selected_filter: {
      usedCar: true,
      car_type : "Used Car",
      year: "2011,2021",
      radius: "100",
      zip: "",
      price_from: 0,
      price_to: 100000,
      mileage: '',
      model: [],
      make: [],
      body_type : [], 
      exterior_color : [],
      interior_color : [],
      transmission : [],
      drivetrain : [],
      fuel_type : [],
      features: {
        'Interior Features': [],
        'Technology Features': [],
        'Safety Features': [],
        'Exterior Features': [],
        Others : []
      }
    }
  },
  reducers : {
    setCars: (state, action) => {
      state.data = action.payload
    },
    setCount: (state, action) => {
      state.count = action.payload
    },
    pageNext : (state) => { state.page = state.page < count ? state.page - 1 : count },
    pagePrev : (state) => { state.page = state.page > 1 ? state.page - 1 : 1 },
    setPage : (state, action) => { state.page = action.payload },
    setFilter : (state, action) => { state.filter = action.payload },
    changeFilter : (state, action) => { state.selected_filter = action.payload },
    changeFilterMake : (state, action) => { state.selected_filter.make = action.payload }
  },
  extraReducers: {
    [changePage.pending] : (state) => {
      state.isLoading = true;
    },
    [changePage.fulfilled] : (state, action) => {
      state.isLoading = false;
      state.data = action.payload.data;
      state.count = action.payload.count;

      console.log("action.payload : ");
      console.log(action.payload, "filled");
      console.log(state, "state");

      if(state.filter.make) {
        if(action.payload.exclude) {
          if(action.payload.exclude.includes("make")) {
            state.filter = {...action.payload.filter, make: [...state.filter.make] };
          }
          //   state.filter = {...action.payload.filter, make: [...state.filter.make], model: {...state.filter.model}};
          // }else {
          //   state.filter = {...action.payload.filter, make: [...state.filter.make]};
          // }
          // console.log(action.payload, "payload from filter changes");
          // console.log({...action.payload.filter, make: [...state.filter.make], ...action.payload.exclude.map(ex => {
            //   return {[ex] : {...state.filter[ex]}}
            // })[0]}, "filter changes");
            // state.filter = {...action.payload.filter, make: [...state.filter.make], ...action.payload.exclude.map(ex => {
            //   return {[ex] : {...state.filter[ex]}}
            // })[0]};
          // let filter_state = {...action.payload.exclude.map(ex => {
          //   return {[ex] : {...state.filter[ex]}}
          // })[0]};
          //   console.log(filter_state, "changes state from filter changes");
            
          // state.filter = {...action.payload.filter, make: [...state.filter.make], ...filter_state};
        }else {
          state.filter = {...action.payload.filter, make: [...state.filter.make]};
        }
      }

    },
    [changePage.rejected] : (state) => {
      state.isLoading = false;
    },
    [HYDRATE] : (state, action) => {
      return {...state,  ...action.payload.cars};
    }
  }
});

export const { setCars, setCount, setAll ,pageNext, pagePrev, setPage, setFilter, changeFilter, changeFilterMake }  = carsSlice.actions;

export default carsSlice.reducer;